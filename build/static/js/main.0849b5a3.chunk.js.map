{"version":3,"sources":["components/pokedex.js","App.js","serviceWorker.js","index.js"],"names":["Pokedex","props","listPokemonRender","bind","onClickPokemonRender","nextPokemonRender","menuPokemonRender","onClickGetType","state","next","previous","lists","sLoaded","listsPokemonLoad","pokemonRender","typeList","e","type","typeSel","selectedType","this","map","index","types","typeO","name","console","log","Array","prototype","push","apply","length","setState","forceUpdate","$","dropdown","componentDidMount","cardPok","className","src","sprites","front_default","alt","toUpperCase","key","stats","stat","base_stat","weight","moves","onClick","href","fetch","then","res","json","result","results","url","set","Set","add","obj","error","class","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0849b5a3.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport $ from \"jquery\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\n\nexport default class Pokedex extends Component {\n  constructor(props) {\n    super(props);\n    this.listPokemonRender = this.listPokemonRender.bind(this);\n    this.onClickPokemonRender = this.onClickPokemonRender.bind(this);\n    this.nextPokemonRender = this.nextPokemonRender.bind(this);\n    this.menuPokemonRender = this.menuPokemonRender.bind(this);\n    this.onClickGetType = this.onClickGetType.bind(this);\n    this.state = {\n      next: \"https://pokeapi.co/api/v2/pokemon?limit=12\",\n      previous: null,\n      lists: [],\n      sLoaded: false,\n      listsPokemonLoad: [],\n      pokemonRender: null,\n      typeList: [],\n    };\n  }\n  onClickGetType(e, type) {\n    var typeSel = type;\n    var selectedType = [];\n    this.state.listsPokemonLoad.map((listsPokemonLoad, index) => {\n      listsPokemonLoad.types.map((typeO, index) => {\n        if (typeO.type.name === typeSel.name) {\n          console.log(listsPokemonLoad);\n          Array.prototype.push.apply(selectedType, [listsPokemonLoad]);\n        }\n      });\n    });\n    if (selectedType.length > 0) {\n      this.setState({ listsPokemonLoad: selectedType });\n    }\n    this.forceUpdate();\n  }\n\n  menuPokemonRender(e) {\n    $().dropdown(\"show\");\n  }\n\n  nextPokemonRender() {\n    this.setState({ listsPokemonLoad: [], pokemonRender: [], typeList: [] });\n    this.componentDidMount();\n  }\n\n  onClickPokemonRender(e, listsPokemonLoad) {\n    if (e) {\n      var cardPok = (\n        <div className=\"card div text-center div w-100\">\n          <img\n            src={listsPokemonLoad.sprites.front_default}\n            className=\"card-img-top div\"\n            alt=\"...\"\n          />\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">\n              {listsPokemonLoad.name.toUpperCase()}\n            </h5>\n            <div className=\"row div text-capitalize\">\n              {listsPokemonLoad.types.map((type, index) => {\n                return (\n                  <Fragment key={index}>\n                    <div className=\"col-8 div\">\n                      {\" \"}\n                      {!(index >= 1) && <p>Type </p>}\n                    </div>\n                    <div className=\"col-4 div\"> {type.type.name}</div>\n                  </Fragment>\n                );\n              })}\n\n              {listsPokemonLoad.stats.map((stat, index) => {\n                return (\n                  <Fragment key={index}>\n                    <div className=\"col-8 div\"> {stat.stat.name}</div>\n                    <div className=\"col-4 div\"> {stat.base_stat}</div>\n                  </Fragment>\n                );\n              })}\n              <div className=\"col-8 div\"> weight</div>\n              <div className=\"col-4 div\"> {listsPokemonLoad.weight}</div>\n              <div className=\"col-8 div\"> total moves</div>\n              <div className=\"col-4 div\"> {listsPokemonLoad.moves.length}</div>\n            </div>\n          </div>\n        </div>\n      );\n\n      this.setState({ pokemonRender: cardPok });\n    }\n  }\n\n  listPokemonRender() {\n    return this.state.listsPokemonLoad.map((listsPokemonLoad, index) => {\n      return (\n        <div\n          className=\"col-md-4\"\n          key={index}\n          onClick={(e) => {\n            this.onClickPokemonRender(e, listsPokemonLoad);\n          }}\n        >\n          <div className=\"card div mt-3 mb-3\">\n            <img\n              src={listsPokemonLoad.sprites.front_default}\n              className=\"card-img-top div\"\n              alt=\"...\"\n            />\n            <div className=\"card-body\">\n              <h5 className=\"card-title text-center\">\n                {listsPokemonLoad.name.toUpperCase()}\n              </h5>\n              <div className=\"row\">\n                {listsPokemonLoad.types.map((type, index) => {\n                  return (\n                    <div className=\"col-6 p-1\">\n                      <a\n                        href=\"#\"\n                        className={\n                          \"btn btn-primary w-100  text-capitalize \" +\n                          type.type.name\n                        }\n                      >\n                        {\" \"}\n                        {type.type.name}\n                      </a>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    });\n  }\n  componentDidMount() {\n    fetch(this.state.next)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            sLoaded: true,\n            lists: result,\n            next: result.next,\n            previous: result.previous,\n          });\n\n          result.results.map((results, index) => {\n            fetch(results.url)\n              .then((res) => res.json())\n              .then(\n                (result) => {\n                  this.setState({\n                    listsPokemonLoad: [...this.state.listsPokemonLoad, result],\n                  });\n\n                  let set = new Set();\n                  this.state.listsPokemonLoad.map((listsPokemonLoad, index) => {\n                    listsPokemonLoad.types.map((type, index) => {\n                      set.add(type.type.name);\n                    });\n                  });\n                  var typeList = [];\n                  for (let value of set) {\n                    var obj = [{ name: value }];\n                    Array.prototype.push.apply(typeList, obj);\n                  }\n                  this.setState({ typeList: typeList });\n                },\n                (error) => {\n                  this.setState({\n                    sLoaded: false,\n                    error,\n                  });\n                }\n              );\n          });\n        },\n\n        (error) => {\n          this.setState({\n            sLoaded: false,\n            error,\n          });\n        }\n      );\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row justify-content-center \">\n          <div class=\"dropdown w-50\">\n            <button\n              class=\"btn btn-secondary dropdown-toggle  w-100\"\n              type=\"button\"\n              id=\"dropdownMenuButton\"\n              data-toggle=\"dropdown\"\n              aria-haspopup=\"true\"\n              aria-expanded=\"false\"\n              onClick={(e) => {\n                this.menuPokemonRender(e, \"click\");\n              }}\n            >\n              <h1>Pokedex</h1>\n            </button>\n\n            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n              {this.state.typeList.map((type, index) => {\n                return (\n                  <Fragment>\n                    <a\n                      class=\"dropdown-item text-capitalize\"\n                      href=\"#\"\n                      onClick={(e) => {\n                        this.onClickGetType(e, type);\n                      }}\n                    >\n                      {type.name}\n                    </a>\n                  </Fragment>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-8\">\n            <div className=\"row\">\n              <Fragment>{this.listPokemonRender()}</Fragment>\n            </div>\n            <div className=\"row justify-content-center mb-3\">\n              <a\n                href=\"#\"\n                className=\"btn btn-primary w-75 h-75\"\n                onClick={(e) => {\n                  this.nextPokemonRender(e);\n                }}\n              >\n                Load More\n              </a>\n            </div>\n          </div>\n          <div className=\"col-md-4 d-flex align-items-center\">\n            <Fragment>{this.state.pokemonRender}</Fragment>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n// import 'bootstrap'; \nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Pokedex from \"./components/pokedex.js\";\n\nfunction App() {\n  return (\n   <Pokedex/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}